start
  = body

/*-------------------------------------------------------------------------------------------------------------------------------------
   body is defined as anything that matches with the part 0 or more times
---------------------------------------------------------------------------------------------------------------------------------------*/
body
  = p:item*

item
  = inline_helper / helper / reference / buffer

buffer
  = e:eol w:ws*
  { return [ "buffer", {line: line(), column: column()}, e, w.join('') ] }
  / b:(!tag c:. { return c })+
  { return [ "buffer", {line: line(), column: column()}, b.join('') ] }

/**
 * ----------------------------------------------------------------------
 * Helper Tags
 * ----------------------------------------------------------------------
 */

inline_helper
    = start:sec_tag_start ws? "/" rd a:after_tag {
      return [start[0], {
        line:   line(),
        column: column(),
        after:  start[0] === "#" ? e : a,
        name:   start[1].text,
        params: start[2]
      }];
  }

helper
    = start:sec_tag_start ws* rd b:body e:bodies end_tag:end_tag {
      return [start[0], {
        line:   line(),
        column: column(),
        after:  end_tag,
        name:   start[1].text,
        params: start[2],
        body:   b,
        bodies: e
      }];
  }

sec_tag_start
  = ld t:[#@] ws* n:identifier p:params {
    return [t, n, p];
  }

key "key"
  = h:[a-zA-Z_$] t:[0-9a-zA-Z_$-]*
  { return h + t.join('') }

params "params"
  = p:(ws+ k:key "=" v:(number / identifier / inline) {return ["param", ["literal", k], v]})*
  { return p }

bodies "bodies"
  = p:(ld ":" k:key rd v:body {return ["param", ["literal", k], v]})*
  { return ["bodies"].concat(p) }

identifier "identifier"
  = p:path     { var arr = ["path"].concat(p); arr.text = p[1].join('.'); return arr; }
  / k:key      { var arr = ["key", k]; arr.text = k; return arr; }

number "number"
  = n:(float / integer) { return ['literal', n]; }

float "float"
  = l:integer "." r:integer+ { return parseFloat(l + "." + r.join('')); }

integer "integer"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }

path "path"
  = k:key? d:(array_part / array)+ {
    d = d[0];
    if (k && d) {
      d.unshift(k);
      return [false, d].concat([['line', line()], ['col', column()]]);
    }
    return [true, d].concat([['line', line()], ['col', column()]]);
  }
  / "." d:(array_part / array)* {
    if (d.length > 0) {
      return [true, d[0]].concat([['line', line()], ['col', column()]]);
    }
    return [true, []].concat([['line', line()], ['col', column()]]);
  }

inline "inline"
  = '"' '"'                 { return ["literal", ""].concat([['line', line()], ['col', column()]]) }
  / '"' l:literal '"'       { return ["literal", l].concat([['line', line()], ['col', column()]]) }
  / '"' p:inline_part+ '"'  { return ["body"].concat(p).concat([['line', line()], ['col', column()]]) }

inline_part
  = reference / l:literal { return ["buffer", l] }

key "key"
  = h:[a-zA-Z_$] t:[0-9a-zA-Z_$-]*
  { return h + t.join('') }

array "array"
  = i:( lb a:( n:([0-9]+) {return n.join('')} / identifier) rb  {return a; }) nk: array_part? { if(nk) { nk.unshift(i); } else {nk = [i] } return nk; }

array_part "array_part"
  = d:("." k:key {return k})+ a:(array)? { if (a) { return d.concat(a); } else { return d; } }

literal "literal"
  = b:(!tag c:(esc / [^"]) {return c})+
  { return b.join('') }

reference "reference"
  = ld n:identifier f:filters rd a:after_tag {
    return ["reference", {line: line(), column: column(), name: n.text, after: a, filters: f}]
  }

after_tag
  = w:ws? e:eol? {
    return (w || '') + (e || '')
  }

tag
  = ld ws* [#?^><+%:@/~%] ws* (!rd !eol .)+ ws* rd
  / reference

end_tag "end tag"
  = ld "/" ws* n:identifier ws* rd after:after_tag {
    return after
  }

filters "filters"
  = f:("|" n:key {return n})*
  { return f }

esc
  = '\\"' { return '"' }

rawcontent
  = c:(char:. {return char})* {return c}

quote
  = '"'

ld
  = "{"

rd
  = "}"

lb
  = "["

rb
  = "]"

any
  = (after:. {return after})+

eol
  = "\n"        //line feed
  / "\r\n"      //carriage + line feed
  / "\r"        //carriage return
  / "\u2028"    //line separator
  / "\u2029"    //paragraph separator

ws
  = [\t\v\f \u00A0\uFEFF] / eol

